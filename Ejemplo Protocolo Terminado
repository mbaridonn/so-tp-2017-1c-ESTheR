Scheduler

//CPU nos indica que un proceso terminó su ráfaga
cpu_sc_process_back(pid, status, program_counter, messages, data) 
pid = id del proceso
status = Del 1 al 4 
	1: El proceso terminó su ráfaga de ejecución
	2: El proceso falló por X motivo (el motivo va en data)
	3: El proceso finalizó correctamente
	4: El proceso pasó a estar bloqueado por E/S
program_counter= donde quedó parado el puntero
messages = mensajes que se tienen que imprimir
data = info relacionada al estado. Por ejemplo si entra en E/S, sería el tiempo que tiene que bloquearse.

//CPU nos indica su info estadística
cpu_sc_stats(data) 
data = porcentaje de uso


 

Cpu

//Scheduler indica comenzar proceso
sc_cpu_startProcess(path, pid, pointer, sentences) 
path = ruta del programagit pus	
pid = id del proceso
pointer = punto en el que debe continuar la ejecución
sentences = cantidad de sentencias a ejecutar (N = 0: Hasta que termine o se bloquee, N = -1: Ir a la última línea y ejecutar, N > 0: Ejecutar cantidad de líneas N)

//Scheduler nos pide el porcentaje de uso
sc_cpu_getStats() 

//El administrador de memoria nos indica que pudo comenzar bien el proceso
mem_cpu_startProcessOk(pid) 
pid = id del proceso

//El admin de memoria nos indica que no hay frames suficientes para comenzar un proceso
mem_cpu_noFrames(pid) 
pid = id del proceso

//Memoria nos indica que no hay espacio suficiente para el proceso a comenzar
mem_cpu_noSpace(pid) 
pid = id del proceso

//El administrador de memoria nos envía el contenido de un frame
mem_cpu_frameData(frame, data) 
frame = número de frame
data = contenido del frame

//El administrador de memoria nos indica que se escribió bien la pagina
mem_cpu_writeOk(data, num) 
data = contenido del frame
num = numero de pagina escrita

 

Memory
//CPU nos indica que comienza un proceso
cpu_mem_startProcess(pid, pages) 
id = id del proceso
pages = cantidad de páginas necesarios para el proceso

//CPU nos solicita la lectura de una pagina
cpu_mem_read(pid, page) 
pid = id del proceso
page = número de frame a leer

//CPU nos indica escribir una pagina
cpu_mem_write(pid, page, data) 
pid = id del proceso
page = número de frame a escribir
data = página a escribir en el frame

//CPU nos indica que finaliza un proceso
cpu_mem_endProcess(pid) 
pid = id del proceso

//Swap nos indica que comenzo correctamente un proceso
sw_mem_startProcessOk(pid)
pid = id del proceso

//Swap nos indica que no hay espacio suficiente para el proceso a comenzar
sw_mem_noSpace(pid) 
pid = id del proceso

//Swap nos devuelve el contenido de una página
sw_mem_page(pid, page, data) 
pid = id del proceso
page = número de frame a escribir
data = datos del frame


 

Swap

//El administrador de memoria indica que comenzó un proceso
mem_sw_startProcess(pid, pages) 
pid = id del proceso
pages = cantidad de paginas necesarios para el proceso

//El administrador de memoria nos solicita una página (lectura)
mem_sw_getPage(pid, page) 
pid = id del proceso
page = número de página

//El administrador de memoria nos pide escribir una página
mem_sw_setPage(pid, page,data) 
pid = id del proceso
page = número de página
data = contenido de la página

//Acción de swapping iniciada por el administrador de memoria
mem_sw_swapping(pid, setPage, data, getPage)
pid = id del proceso
setPage = número de página a guardar
data = datos de la página a guardar
getPage = número de página solicitada

//El administrador de memoria indica que finalizó un proceso
mem_sw_endProcess(pid) 
pid = id del proceso
